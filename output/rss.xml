<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NuLL</title><link>https://dagrons.github.io/</link><description>NuLL</description><atom:link href="https://dagrons.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2021 &lt;a href="mailto:heyuehuii@126.com"&gt;dagrons&lt;/a&gt; </copyright><lastBuildDate>Fri, 24 Sep 2021 02:57:40 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>redis初探</title><link>https://dagrons.github.io/posts/redischu-tan/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;h3 id="redis"&gt;redis简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;redis是单进程, 单线程, 所以具有很好的同步能力&lt;/li&gt;
&lt;li&gt;redis所有操作都是原子性的, 单个操作是原子性的, 多个操作也支持事务(通过MULTI和EXEC指令), 乍一看redis支持的数据类型也不特殊, 而其灵活性就来源于redis的操作原子性, 借助这个特性我们可以轻易实现分布式锁&lt;/li&gt;
&lt;li&gt;redis是分布式通信的绝佳手段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="redis_1"&gt;redis支持的数据类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;string: 最基础的数据类型, 二进制安全字符串, 存储图片等二进制格式需要存储base64编码&lt;/li&gt;
&lt;li&gt;hash: 哈希&lt;/li&gt;
&lt;li&gt;list: 列表&lt;/li&gt;
&lt;li&gt;set: 集合&lt;/li&gt;
&lt;li&gt;zset(sorted set): 有序集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;悲观锁实现&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StrictRedis&lt;/span&gt; 

&lt;span class="n"&gt;redis_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode_response&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# StrictRedis 接口和命令行接口兼容&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;order_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setnx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'lock:order'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;redis_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'lock:order'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 设置过期时间防止死锁&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;order_lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;reserve_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserve_count'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;redis_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserve_count'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'已下单'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'已告罄'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;redis_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'lock:order'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="_2"&gt;乐观锁实现&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WatchError&lt;/span&gt;

&lt;span class="n"&gt;redis_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="n"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 管道用于打包多条无关命令批量执行, 用来提升性能&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        
        &lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserve_count'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserve_count'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# 有库存, 让库存 -1            &lt;/span&gt;
            &lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;            
            &lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reserve_count'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            
            &lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 会执行之前的所有命令&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'已下单'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'已售罄'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            
            &lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;WatchError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 出现该异常, 说明监听的数据被修改了, 重试/取消&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'重试'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="cheatsheet"&gt;Cheatsheet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.runoob.com/w3cnote/python-redis-intro.html"&gt;runoob python redis&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/redischu-tan/</guid><pubDate>Thu, 23 Sep 2021 14:36:52 GMT</pubDate></item><item><title>nginx配置ssl</title><link>https://dagrons.github.io/posts/nginxpei-zhi-ssl/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;h3 id="_1"&gt;问题分析&lt;/h3&gt;
&lt;p&gt;在很多时候, 我们需要实现加密通信, 例如对于mal应用而言, 由于要上传恶意软件, 势必会被防火墙拦截, 因此需要配置ssl, 才能绕过这些限制&lt;/p&gt;
&lt;h3 id="_2"&gt;生成自签名证书&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days &lt;span class="m"&gt;365&lt;/span&gt; -out certificate.pem
&lt;/pre&gt;
&lt;h3 id="nginxssl"&gt;nginx配置ssl&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;sudo mkdir /etc/nginx/cert &amp;amp;&amp;amp; cp *.pem /etc/nginx/cert
&lt;/pre&gt;
&lt;p&gt;/etc/nginx/sites-enabled/mal&lt;/p&gt;
&lt;pre class="code literal-block"&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="n"&gt;ssl_certificate&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;certificate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;ssl_certificate_key&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;^/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="n"&gt;proxy_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dell&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mal&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;

         &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;^/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mal_ui&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;检查配置&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo nginx -t
&lt;/pre&gt;
&lt;p&gt;配置生效&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/nginxpei-zhi-ssl/</guid><pubDate>Tue, 21 Sep 2021 08:26:07 GMT</pubDate></item><item><title>gunicorn + nginx 实现 flask + react 应用部署</title><link>https://dagrons.github.io/posts/gunicorn-%2B-nginx-shi-xian-flask-%2B-react-ying-yong-bu-shu/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;h3 id="_1"&gt;问题分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用gunicorn作为flask应用的生产环境服务器&lt;/li&gt;
&lt;li&gt;通过nginx实现flask和react的代理连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="wsgi-axios"&gt;wsgi入口文件 + axios配置&lt;/h3&gt;
&lt;p&gt;/home/dell/mal/runserver.py&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_app&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;有了上面的wsgi入口文件, 我们就可以通过gunicorn启动服务&lt;/p&gt;
&lt;pre class="code literal-block"&gt;gunicorn --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:6000 runserver:app
&lt;/pre&gt;
&lt;p&gt;同时前端对后端api的调用baseURL为"/api/v2"
axios/index.js&lt;/p&gt;
&lt;pre class="code literal-block"&gt;axios.defaults.baseURL = "/api/v2";
&lt;/pre&gt;
&lt;h3 id="gunicorn"&gt;gunicorn自启动脚本&lt;/h3&gt;
&lt;p&gt;/etc/systemd/system/mal.service&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;malware analysis service backend&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;dell&lt;/span&gt;
&lt;span class="na"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;span class="na"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/dell/mal&lt;/span&gt;
&lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"PATH=/home/dell/Envs/mal/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/dell/Envs/mal/bin/gunicorn --workers 3 --bind unix:mal.sock -m 007 runserver:app&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;
&lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;mal&lt;/span&gt; 
&lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;mal&lt;/span&gt; &lt;span class="c1"&gt;# 开机自启动&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="react-build"&gt;react build&lt;/h3&gt;
&lt;p&gt;生成react部署文件&lt;/p&gt;
&lt;pre class="code literal-block"&gt;yarn build 
&lt;/pre&gt;
&lt;p&gt;将部署文件拷贝到/var/www/html/mal_ui下&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo cp -r build/* /var/www/html/mal_ui
&lt;/pre&gt;
&lt;h3 id="nginx"&gt;nginx配置代理&lt;/h3&gt;
&lt;p&gt;将前端代理到 ^/&lt;/p&gt;
&lt;p&gt;将后端api代理到 ^/api/v2/&lt;/p&gt;
&lt;p&gt;/etc/nginx/sites-available/mal&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;^/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="n"&gt;proxy_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dell&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mal&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;^/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mal_ui&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;然后enable该site&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo ln -s /etc/nginx/sites-available/mal /etc/nginx/sites-enabled/
&lt;/pre&gt;
&lt;p&gt;检查配置有无语法错误&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo nginx -t 
&lt;/pre&gt;
&lt;p&gt;使配置生效&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/gunicorn-%2B-nginx-shi-xian-flask-%2B-react-ying-yong-bu-shu/</guid><pubDate>Tue, 21 Sep 2021 06:05:16 GMT</pubDate></item><item><title>python执行外挂-subprocess</title><link>https://dagrons.github.io/posts/pythonzhi-xing-wai-gua-subprocess/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;h2 id="python-subprocess"&gt;python执行外挂-subprocess&lt;/h2&gt;
&lt;p&gt;相比于os.system, subprocess允许我们直接创建进程, 而非从shell再创建任务, 而且允许我们对创建的进程执行更多的动作&lt;/p&gt;
&lt;h3 id="import-concepts"&gt;Import Concepts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A subprocess in Python is a task that a python scripts delegates to the Operating System (OS), That invokes wokring with the standard input &lt;em&gt;stdin&lt;/em&gt;, standard output &lt;em&gt;stdout&lt;/em&gt;, and return codes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程和程序是存在区别的, 进程是程序的容器, 进程的创建过程如下: 发出进程创建请求, 操作系统创建进程容器, 操作系统为进程配置好输入输出, pid, 环境变量等容器环境和资源, 然后操作系统加载程序到容器中, 进行执行, 在Unix，，这分别是由fork()和exec()完成的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="popen-object"&gt;Popen Object&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bufsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preexec_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;close_fds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;universal_newlines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;startupinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;creationflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;类似bash&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;其中args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;为command&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;和args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;区别在于command&lt;/span&gt; &lt;span class="n"&gt;name是ps等命令会显示的display&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;而executble是真正的可执行程序&lt;/span&gt;

&lt;span class="n"&gt;close_fds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;descriptors&lt;/span&gt; &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;executed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;即子进程不会继承当前进程的file&lt;/span&gt; &lt;span class="n"&gt;descriptors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;除了0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;等价于Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'/bin/sh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;working&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="n"&gt;defines&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="popen-instance-methods-attributes"&gt;Popen Instance Methods &amp;amp; Attributes&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# if a child process has terminated&lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# wait a child process to terminated &lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# send data to stdin, return (stdoutdata, stderrdata) &lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# send signal to child process&lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="c1"&gt;# None if hasn't terminated yet. -N indicate that the child was terminated by signal N(Unix only)&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="popen"&gt;Popen简化版&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;call&lt;/strong&gt;
Run command with arguments. Wait for command to complete, then return the retcode&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"ls"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-l"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;check_output&lt;/strong&gt;
Run command with arguments and return its output as a byte string &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"ls"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-l"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/dev/null"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; 'crw-rw-rw- 1 root root ... '&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;OSError&lt;/strong&gt; errors when trying to execute a non-existent file. Application should prepare for OSError exception&lt;/p&gt;
&lt;h3 id="cheatsheet"&gt;Cheatsheet&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;output=`mycmd myarg`
==&amp;gt;
output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;`&lt;span class="nv"&gt;dmesg&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;grep&lt;/span&gt; &lt;span class="nv"&gt;hda&lt;/span&gt;`
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Popen&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dmesg&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;], &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;PIPE&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Popen&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;grep&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;, &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;hda&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;], &lt;span class="nv"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;p1&lt;/span&gt;.&lt;span class="nv"&gt;stdout&lt;/span&gt;, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;PIPE&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p1&lt;/span&gt;.&lt;span class="nv"&gt;stdout&lt;/span&gt;.&lt;span class="nv"&gt;close&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;  # &lt;span class="nv"&gt;Allow&lt;/span&gt; &lt;span class="nv"&gt;p1&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;receive&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;SIGPIPE&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;p2&lt;/span&gt; &lt;span class="nv"&gt;exits&lt;/span&gt;.
&lt;span class="nv"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;p2&lt;/span&gt;.&lt;span class="nv"&gt;communicate&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;]
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;sts = os.system("mycmd" + " myarg")
==&amp;gt;
p = Popen("mycmd" + " myarg", shell=True)
sts = os.waitpid(p.pid, 0)[1]
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;pid = os.spawnlp(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg")
==&amp;gt;
pid = Popen(["/bin/mycmd", "myarg"]).pid
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;retcode = os.spawnlp(os.P_WAIT, "/bin/mycmd", "mycmd", "myarg")
==&amp;gt;
retcode = call(["/bin/mycmd", "myarg"])
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;os.spawnlpe(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg", env)
==&amp;gt;
Popen(["/bin/mycmd", "myarg"], env={"PATH": "/usr/bin"})
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/pythonzhi-xing-wai-gua-subprocess/</guid><pubDate>Sun, 19 Sep 2021 05:28:14 GMT</pubDate></item><item><title>br0没有ip地址解决方案</title><link>https://dagrons.github.io/posts/br0mei-you-ipdi-zhi-jie-jue-fang-an/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;h2 id="_1"&gt;问题分析&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;br0没有ip，但enp0s31f6有ip&lt;/li&gt;
&lt;li&gt;lxc list显示容器都没有ip, 推测br0没有正常工作&lt;/li&gt;
&lt;li&gt;dhclient br0 无法成功&lt;/li&gt;
&lt;li&gt;brctl show br0 在interfaces列没有enp0s31f6&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;解决方案&lt;/h2&gt;
&lt;p&gt;首先通过brctl show br0发现没有物理网卡绑定，因此通过&lt;/p&gt;
&lt;pre class="code literal-block"&gt;brctl addif br0 enp0s31f6
&lt;/pre&gt;
&lt;p&gt;手动添加物理网卡, 添加后发现容器可以正常获取ip了&lt;/p&gt;
&lt;p&gt;但host的br0仍然没有ip&lt;/p&gt;
&lt;p&gt;然后重新修改/etc/netplan/01-netcfg.yaml&lt;/p&gt;
&lt;pre class="code literal-block"&gt;# &lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="nv"&gt;more&lt;/span&gt; &lt;span class="nv"&gt;information&lt;/span&gt;, &lt;span class="nv"&gt;see&lt;/span&gt; &lt;span class="nv"&gt;netplan&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;.
&lt;span class="nv"&gt;network&lt;/span&gt;:
  &lt;span class="nv"&gt;version&lt;/span&gt;: &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="nv"&gt;renderer&lt;/span&gt;: &lt;span class="nv"&gt;networkd&lt;/span&gt;
  &lt;span class="nv"&gt;ethernets&lt;/span&gt;:
    &lt;span class="nv"&gt;enp0s31f6&lt;/span&gt;:
      &lt;span class="nv"&gt;dhcp4&lt;/span&gt;: &lt;span class="nv"&gt;yes&lt;/span&gt;
      &lt;span class="nv"&gt;dhcp6&lt;/span&gt;: &lt;span class="nv"&gt;yes&lt;/span&gt;
  &lt;span class="nv"&gt;bridges&lt;/span&gt;:
    &lt;span class="nv"&gt;br0&lt;/span&gt;:
      &lt;span class="nv"&gt;dhcp4&lt;/span&gt;: &lt;span class="nv"&gt;yes&lt;/span&gt;
      &lt;span class="nv"&gt;dhcp6&lt;/span&gt;: &lt;span class="nv"&gt;yes&lt;/span&gt;
      &lt;span class="nv"&gt;interfaces&lt;/span&gt;:
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;enp0s31f6&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;重新载入配置&lt;/p&gt;
&lt;pre class="code literal-block"&gt;netplan --debug apply
&lt;/pre&gt;
&lt;p&gt;发现br0成功得到ip&lt;/p&gt;
&lt;p&gt;重启后依然生效&lt;/p&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/br0mei-you-ipdi-zhi-jie-jue-fang-an/</guid><pubDate>Thu, 09 Sep 2021 06:14:32 GMT</pubDate></item><item><title>Go学习第二天-字符串相关</title><link>https://dagrons.github.io/posts/goxue-xi-di-er-tian-zi-fu-chuan-xiang-guan/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;h2 id="go-"&gt;Go学习第二天-字符串相关&lt;/h2&gt;
&lt;p&gt;如果有不确定的地方, 可以在a tour of go上做做小实验&lt;/p&gt;
&lt;h3 id="byterune"&gt;byte和rune&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Golang has integer types called byte and rune that are aliases for uint8 and int32 data types, repectively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以byte和rune本质上就是uint8和uint32, byte用于ASCII编码, rune用于Unicode编码&lt;/p&gt;
&lt;p&gt;除此之外, 在golang中, 没有char类型, 用于byte和rune表示char类型&lt;/p&gt;
&lt;p&gt;值得注意, golang中的int和int32与int64并不是一个类型, &lt;a href="https://golang.org/ref/spec#Numeric_types"&gt;int vs int32 vs 34&lt;/a&gt;, 因此下面的代码并不合法&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"123"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb nb-Type"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"123"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nb nb-Type"&gt;int&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseInt&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;In Go, Characters are expressed by enclosing them in single quotes like this: 'a'.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Go中, 用单引号来实现char的literal&lt;/p&gt;
&lt;p&gt;默认情况下, char用rune来存储, 如下: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myLetter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt; &lt;span class="c1"&gt;// Type inferred as rune&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;我们也可以显示声明一个byte存储的char, 如下: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myLetter&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;在上述表述中, char不是一个具体的类型&lt;/p&gt;
&lt;h3 id="_1"&gt;字符串&lt;/h3&gt;
&lt;p&gt;在golang中, 字符串并不是byte数组或rune数组, 因为byte数组和rune数组都是可变，但字符串不可变(和除了C++以外的其他语言一样), &lt;/p&gt;
&lt;p&gt;除此之外, 还有一个值得注意的是, byte数组和rune数组用fmt.Println()打印出来都是数字, 说明他们本质上仍然是uint8数组和uint32数组, 如果要打印出可读的字符串, 还是需要转成string&lt;/p&gt;
&lt;p&gt;如下:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"张明阳是傻逼"&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 张&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nb"&gt;rune&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [24352 26126 38451]&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nb"&gt;rune&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 张明阳&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 id="bytes-slice-over-string"&gt;bytes slice over string?&lt;/h3&gt;
&lt;p&gt;由于string不可变, 因此在刷题时并不实用, 更实用的方法是通过bytes数组进行字符数据存储和操作, 只在需要显示时才将其转化为string&lt;/p&gt;
&lt;h3 id="strings"&gt;strings包&lt;/h3&gt;
&lt;p&gt;string是go的内置类型, 而strings是针对string的包, 包含了处理string的诸多方法, 在此我们只列举部分常用函数&lt;/p&gt;
&lt;pre class="code literal-block"&gt;strings.Compare(s1, s2 string) int // 字符串比较
strings.Join([]string, string) // 拼接多个字符串
strings.Split(s, str string) // 切割字符串
strings.Fields(s strings) // 按空白字符切割字符串
strings.Repeat(s string, n int) string // 重复字符串
strings.Replace("张明阳是傻逼", "傻逼", "纯弱智", -1) // 替换字符串, -1表示替换所有, 如果大于0表示替换几个 // =&amp;gt; 张明阳是纯弱智
strings.Contains(s, substr string) // 是否存在子串
strings.ContainsAny(s, chars string) // chars中的字符是否在s中出现过
strings.Index(s string, str string) // 返回str在s中第一次出现的位置, 如果不存在返回-1, str为空返回0
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/goxue-xi-di-er-tian-zi-fu-chuan-xiang-guan/</guid><pubDate>Wed, 08 Sep 2021 13:06:45 GMT</pubDate></item><item><title>展示服务器GPU使用情况及账号IP</title><link>https://dagrons.github.io/posts/zhan-shi-fu-wu-qi-gpushi-yong-qing-kuang-ji-zhang-hao-ip/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;h2 id="_1"&gt;问题分析：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先通过crontab设置定时任务，将ip信息和gpu使用情况定时打到某文件中&lt;/li&gt;
&lt;li&gt;通过one-shot-server创建服务&lt;/li&gt;
&lt;li&gt;或者通过nginx创建服务&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="gpu"&gt;GPU使用情况脚本&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;persons&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="nv"&gt;usages&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; t &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;nvidia-smi&lt;span class="p"&gt;|&lt;/span&gt;egrep &lt;span class="s1"&gt;'^\|[\ ]{4}[[:digit:]]'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;'|'&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;awk &lt;span class="s1"&gt;'{print $4}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="c1"&gt;# command substitution&lt;/span&gt;
    &lt;span class="nv"&gt;persons&lt;/span&gt;&lt;span class="o"&gt;+=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat /proc/&lt;span class="nv"&gt;$t&lt;/span&gt;/cgroup&lt;span class="p"&gt;|&lt;/span&gt;head -n &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;cut -d &lt;span class="s1"&gt;'.'&lt;/span&gt; -f &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; t &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;nvidia-smi&lt;span class="p"&gt;|&lt;/span&gt;egrep &lt;span class="s1"&gt;'^\|[\ ]{4}[[:digit:]]'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;'|'&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;awk &lt;span class="s1"&gt;'{print $7}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 

    &lt;span class="nv"&gt;usages&lt;/span&gt;&lt;span class="o"&gt;+=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nv"&gt;plen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# parameter expansion&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"------"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"usage:"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"------"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i&amp;lt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;plen&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="c1"&gt;# arithemetic expansion&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%-10s\t | %10s\n"&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;[i]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;usages&lt;/span&gt;&lt;span class="p"&gt;[i]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; 
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"update at &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"------------------------------"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"------------------------------"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; 
&lt;/pre&gt;
&lt;h2 id="ip"&gt;账号IP信息打印&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;lxc list 
&lt;/pre&gt;
&lt;h2 id="crontab"&gt;crontab设置定时任务&lt;/h2&gt;
&lt;p&gt;定时打印ip和gpu使用信息&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;*/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;nvidia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;smi&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dagongren&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="o"&gt;*/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;who_is_using_gpu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dagongren&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;
&lt;span class="o"&gt;*/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;who_is_using_gpu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dagongren&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;snap&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxc&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dagongren&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dagongren&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;
&lt;h2 id="one-shot-server"&gt;one-shot-server脚本&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;#/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"The file &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; does not exist"&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"The file &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; does exist"&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -ne &lt;span class="s2"&gt;"HTTP/1.0 200 OK\r\nContent-Length: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wc -c &amp;lt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;\r\n\r\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; nc -l -p &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;h2 id="one-shot-server_1"&gt;通过one-shot-server启动服务&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;最好启动两次, 我也不知道为什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;nohup bash ./one_shot_server &lt;span class="m"&gt;1205&lt;/span&gt; /root/share/ip &amp;gt; /dev/null &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; 
&lt;/pre&gt;
&lt;h2 id="nginx"&gt;通过nginx创建服务&lt;/h2&gt;
&lt;p&gt;/etc/nginx/sites-enabled/default内容如下：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;1205&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;然后加载nginx配置&lt;/p&gt;
&lt;pre class="code literal-block"&gt;nginx -s reload
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/zhan-shi-fu-wu-qi-gpushi-yong-qing-kuang-ji-zhang-hao-ip/</guid><pubDate>Fri, 03 Sep 2021 12:45:38 GMT</pubDate></item><item><title>自动上传实验室服务器信息到腾讯云服务器</title><link>https://dagrons.github.io/posts/zi-dong-shang-chuan-shi-yan-shi-fu-wu-qi-xin-xi-dao-teng-xun-yun-fu-wu-qi/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;p&gt;因为实验室服务器每次重启IP都可能改变，因此需要服务器重启后自动将IP上传到腾讯云服务器上，这样就不用每次连显示器去查询IP（十分麻烦）&lt;/p&gt;
&lt;h2 id="_1"&gt;问题分析&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;服务器无法自动连接到Internet，就无法连接到腾讯云，所以需要一个服务监听Internet连接状态，在没有Internet连接时，自动登陆校园网&lt;/li&gt;
&lt;li&gt;为了方便，我们选择用ssh协议上传ip信息，并且60秒更新一次&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记录流程如下：&lt;/p&gt;
&lt;h2 id="ipetchosts"&gt;先将腾讯云IP加到/etc/hosts&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"120.53.125.30     tencent_cloud"&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts
&lt;/pre&gt;
&lt;h2 id="ssh-key-pubkeytencent_cloud"&gt;将ssh-key pubkey加到tencent_cloud的信任列表中&lt;/h2&gt;
&lt;p&gt;以一步是防止ssh上传ip时要求输入密码&lt;/p&gt;
&lt;pre class="code literal-block"&gt;cat ~/.ssh/id_rsa.pub &lt;span class="p"&gt;|&lt;/span&gt; ssh ubuntu@tencent_cloud &lt;span class="s1"&gt;'cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys'&lt;/span&gt; 
&lt;/pre&gt;
&lt;h2 id="internet"&gt;检测Internet连接并自动登陆校园网的脚本&lt;/h2&gt;
&lt;p&gt;/usr/local/bin/autologin内容如下&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; ping -q -c &lt;span class="m"&gt;1&lt;/span&gt; -W &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8 &amp;gt;/dev/null&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Internet Connection is alive"&lt;/span&gt;
    sleep &lt;span class="m"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    python3 /home/dell/get2internet.py &lt;span class="m"&gt;2020110966&lt;/span&gt; Daxiahyh1
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;h2 id="ip"&gt;上传ip的脚本&lt;/h2&gt;
&lt;p&gt;/usr/local/bin/upload-ip内容如下:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;ipaddr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ifconfig br0 &lt;span class="p"&gt;|&lt;/span&gt;egrep &lt;span class="s1"&gt;'inet\ '&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;awk &lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="k"&gt;)&lt;/span&gt;
    cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF | ssh root@tencent_cloud 'cat &amp;gt; /var/www/html/lab_host3.html'&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;h1&amp;gt;基础信息&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;服务器编号： 3&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;服务器IP：$ipaddr&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;账号IP及GPU使用情况: &amp;lt;a href="http://$ipaddr:1205"&amp;gt;入口&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;p&amp;gt;update time: $time&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;h1&amp;gt;README&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;h2&amp;gt;硬件信息&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;GPU: 两块3080(公用) &amp;lt;br /&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;CPU: Intel(R) Xeon(R) Silver 4210R CPU @ 2.40GHz &amp;lt;br /&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;h2&amp;gt;使用注意&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;服务器IP在重启后IP可能变化, 但这个链接不会变化, 要是发现服务器登不上, 可以点击上面的账号IP信息入口, 查看自己账号IP是否改变过&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;/share下是公用目录, 建议将数据集放在这(这样别人也可以用), 以及和别人共享文件, 也是这个目录, 显卡驱动安装脚本(rescue.sh)也在这里, 最好不要自己瞎装驱动了, 如果要自己装, 后面加上--no-kernel-module参数&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;账号默认root密码是1205, ssh端口是42502, 最好改一下密码&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;如果要对自己的容器进行一些奇奇怪怪的操作之前, 可以提前让我给你容器创建个备份, 不然可能发生一些不太好的事情&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
    sleep &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;h2 id="autologinservice"&gt;创建autologin.service文件&lt;/h2&gt;
&lt;p&gt;/etc/systemd/system/autologin.service内容如下：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Auto Login for Internet&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network-online.target&lt;/span&gt;
&lt;span class="na"&gt;Wants&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network-online.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/bin/autologin&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;
&lt;h2 id="upload-ipservice"&gt;创建upload-ip.service文件&lt;/h2&gt;
&lt;p&gt;/etc/systemd/system/upload-ip.service内容如下：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Send ip to remote tencent cloud server&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network-online.target&lt;/span&gt;
&lt;span class="na"&gt;Wants&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network-online.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/bin/upload-ip&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;
&lt;h2 id="_2"&gt;启动服务&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;sudo systemctl deamon-reload
sudo systemctl start upload-ip.service
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; upload-ip.service
sudo systemctl start autologin.service
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; autologin.service
&lt;/pre&gt;
&lt;h2 id="systemctl-cheatsheet"&gt;附送systemctl cheatsheet&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt; &lt;span class="c1"&gt;# Reload the service files to include the new service&lt;/span&gt;
&lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="c1"&gt;# Start your service&lt;/span&gt;
&lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="c1"&gt;# To check the status of your service&lt;/span&gt;
&lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="c1"&gt;# To enable your service on every reboot&lt;/span&gt;
&lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="c1"&gt;# To disable your service on every reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/zi-dong-shang-chuan-shi-yan-shi-fu-wu-qi-xin-xi-dao-teng-xun-yun-fu-wu-qi/</guid><pubDate>Fri, 03 Sep 2021 11:31:01 GMT</pubDate></item><item><title>恶意代码分析基础-第一天</title><link>https://dagrons.github.io/posts/e-yi-dai-ma-fen-xi-ji-chu-di-yi-tian/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;h2 id="-"&gt;恶意代码分析基础-第一天&lt;/h2&gt;
&lt;p&gt;PE分析工具：PEID, ExecInfo&lt;/p&gt;
&lt;p&gt;&lt;a href="https://thunderjie.github.io/2019/03/27/PE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/"&gt;PE结构详解 | Thunder_J (thunderjie.github.io)&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.cnblogs.com/night-ride-depart/p/5776107.html"&gt;PE结构分析 | 输入表结构和输入地址表(IAT)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HNT和IAT内容相同, 但HNT被载入内存后不再改变, IAT会被覆写从而直接指向API函数地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/Cody_Ren/article/details/77815952"&gt;IAT导入函数地址表&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用实例讲解, 有IAT解析流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脱壳需要做的两件事: 修复IAT表, 覆写OEP, dump&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要有IAT修复?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序在脱壳完成进入OEP的时候, IAT已经被覆写了,
为了让dump出的程序正常运行, 我们需要将IAT进行修复
从INT重建IAT不靠谱是因为在脱壳过程中, 完全可以毁掉INT, 而原始加壳文件payload被加密, 无法确定INT的位址和内容&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><guid>https://dagrons.github.io/posts/e-yi-dai-ma-fen-xi-ji-chu-di-yi-tian/</guid><pubDate>Thu, 26 Aug 2021 13:01:29 GMT</pubDate></item><item><title>论文阅读-类别增量学习-Class-incremental learning: survey and performance evaluation on image classification</title><link>https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/</link><dc:creator>dagrons</dc:creator><description>&lt;div&gt;&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/#_1"&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/#_2"&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/#_3"&gt;一些常见概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/#task-il-vs-class-il"&gt;task-IL vs class-IL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/#sil-vs-cil-vs-fil"&gt;SIL vs CIL vs FIL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/#_4"&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/#_5"&gt;方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_1"&gt;前言&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;基于增量学习的恶意代码家族分类
为什么用增量学习 + 恶意代码家族分类?
恶意代码家族分类是需要增量学习的典型任务场景, 恶意代码家族不可能预先给定, 不同的恶意代码家族会随着发展不断产生变体, 而在所有数据集上重新训练模型也是难以实现的, 是典型的class-incremental learning场景
其次, BODMAS数据集中包含500多个恶意代码家族, 为研究增量学习提供了可能性
再其次, 增量学习目前发展较慢, 仍存在大量问题, 通过增量学习实现恶意代码家族分类是有意义的, 而针对恶意代码家族分类去研究增量学习也是有意义的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;简介&lt;/h3&gt;
&lt;p&gt;In most incremental learning scenarios, tasks are presented to a learner in a sequence of delineated &lt;em&gt;training sessions&lt;/em&gt; during which data from a single task is available for learning.
After each training session, the learner should be capable of performing all perviously seen tasks on unseen data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在增量学习场景下, 每一轮训练针对一个任务进行训练, 在训练结束后, 要求模型能对前面训练过的所有任务进行完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main challenge in incremental learning is to learn from data from the current task in a way that prevents forgetting of previously learned tasks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;增量学习的主要问题就是避免当前训练对以前任务的遗忘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一点和迁移学习类似但也有所不同, 迁移学习不要求对以前训练任务的知识实现保留&lt;/p&gt;
&lt;p&gt;They aim to exploit knowledge from previous classes to improve learning of new ones(&lt;em&gt;forward transfer&lt;/em&gt;), as well as exploiting new data to improve performance on previous tasks(&lt;em&gt;backward transfer&lt;/em&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用旧知识帮助学习新知识, 用新知识巩固旧知识, sounds make sense&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;一些常见概念&lt;/h3&gt;
&lt;h4 id="task-il-vs-class-il"&gt;task-IL vs class-IL&lt;/h4&gt;
&lt;p&gt;task-IL: task-incremental learning, 在inference的时候, 会给定样本的task ID&lt;/p&gt;
&lt;p&gt;class-IL: class-incremental learning, 在inference的时候, 不给定样本的task ID&lt;/p&gt;
&lt;p&gt;这里还是有些不清楚&lt;/p&gt;
&lt;h4 id="sil-vs-cil-vs-fil"&gt;SIL vs CIL vs FIL&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;SIL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;问题：由于新数据的各种原因，样本的特征值可能会改变，每个类别的比例也会改变。这些都会影响分类的准确率。&lt;/p&gt;
&lt;p&gt;任务：因此，需要确保在现有知识的情况下，通过新样本的增量学习来提取新知识，融合新旧知识以提高分类的准确性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CIL
任务：识别新类，并将其加入现有类别的集合中，提升分类的准确性和智能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FIL
一些新的属性特征能够将分类提升到一个很大的程度，并提升分类准确率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;任务：在现有特征空间的基础上，加入新的属性特征，构建新的特征空间，提升分类准确率。&lt;/p&gt;
&lt;h3 id="_4"&gt;问题&lt;/h3&gt;
&lt;p&gt;catastrophic forgetting(灾难性遗忘), 为了克服灾难性遗忘, 我们一方面希望模型能从新数据中有效学习新知识, 但另一方面又必须防止新输入的数据对已有知识的显著干扰(稳定性), 即&lt;strong&gt;稳定性-可塑性困境&lt;/strong&gt;(stability-plasticity dilemma)&lt;/p&gt;
&lt;p&gt;增量学习的主要研究目的就是在计算和存储资源有限的条件下, 在稳定性-可塑性困境中寻找最佳平衡点&lt;/p&gt;
&lt;h3 id="_5"&gt;方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;正则(regularization)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回放(rehearsal)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数隔离(parameter isolation)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>incremental learning</category><guid>https://dagrons.github.io/posts/lun-wen-yue-du-lei-bie-zeng-liang-xue-xi-class-incremental-learning-survey-and-performance-evaluation-on-image-classification/</guid><pubDate>Sat, 21 Aug 2021 05:28:23 GMT</pubDate></item></channel></rss>